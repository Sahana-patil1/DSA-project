// Online C compiler to run C program online
#include <stdio.h>

// C program for the above approach
#include <stdio.h>
#include <stdbool.h>
#include <string.h>
#include <stdlib.h>
#include <ctype.h>

// Defining Structure

// Global variables
char source[20], des[20], train[40];
char station[40], cla[40];
int time1, time2, a[55];
int Seats[10][10];

struct Bus { 
	int busNumber; 
	char source[50]; 
	char destination[50]; 
	int totalSeats; 
	int availableSeats; 
	float fare; 
}; 

typedef struct mynode {
	char name[20];
	char gen;
	int age;
    char phone_number[11];
    int reservation;
	struct mynode* next;
    int seatNumber; 
	struct Bus busNumber; 
} Node;

Node* firstPerson = NULL;
Node* lastPerson = NULL;
Node* firstSenior = NULL;
Node* lastSenior = NULL;

struct User { 
	char username[50]; 
	char password[50]; 
}; 

int seat_booking();
Node* create_person(char *ptrName, char gen, int age, char *phone_num,int reservation)
{ Node *newperson;
newperson = (Node *)malloc(sizeof(Node));
if (newperson == NULL)
{
printf("\nMemory was not allocated");
return 0;
}
else
{
strcpy(newperson->name, ptrName);

strcpy(newperson->phone_number, phone_num);
newperson->gen=gen;
newperson->age=age;
newperson->reservation=reservation;

newperson->next = NULL;
return newperson;
}
}

void insert_senior_person(char *val, char gen, int age, char *phone_num, int reservation) {
    Node *newperson = create_person(val, gen, age, phone_num, reservation);
    if (firstSenior == lastSenior && lastSenior == NULL) {
        firstSenior = lastSenior = newperson;
        firstSenior->next = NULL;
        lastSenior->next = NULL;
    } else {
        lastSenior->next = newperson;
        lastSenior = newperson;
        lastSenior->next = NULL;
    }
    printf("\n---- Senior Citizen Inserted ----");
}
void insert_person_at_last(char *val, char gen, int age, char *phone_num,int reservation)
{

Node *newperson = create_person(val,gen,age,phone_num,reservation);
if (firstPerson == lastPerson && lastPerson == NULL)
{
firstPerson = lastPerson = newperson;
firstPerson->next = NULL;
lastPerson->next = NULL;
}
else
{
lastPerson->next = newperson;
lastPerson = newperson;
lastPerson->next = NULL;
}
printf("\n----INSERTED----");

}

void insert_passenger(char *name, char gen, int age, char *phone_num, int reservation) {
    if (age >= 60) {
        insert_senior_person(name, gen, age, phone_num, reservation);
    } else {
        insert_person_at_last(name, gen, age, phone_num, reservation);
    }
}


bool isValidName(const char *name) {
    
    for (int i = 0; i < strlen(name); i++) {
        if (!isalpha(name[i]) && name[i] != ' ') {
            return false;
        }
    }
    return true;
}

bool isValidAge(int age) {
    return age >= 4 && age <= 123;
}

bool isValidPhoneNumber(const char *phoneNumber) {
    
    int len = strlen(phoneNumber);
    if (len != 10 || phoneNumber[0] == '0')
        return false;

    for (int i = 0; i < len; i++) {
        if (!isdigit(phoneNumber[i]))
            return false;
    }
    return true;
}

bool isValidEmail(const char *email) {
    
    char *at = strchr(email, '@');
    return at != NULL;
}

bool isValidGender(char gender) {
    return gender == 'M' || gender == 'F' || gender == 'O';
}
void details(int k)
{  
char name[100], phoneNumber[15], email[100] = "", gender;
    int age,i=0;
for (i = 1; i <= k; i++) {
    
    do { printf("\n");
        printf("Enter the %dth passenger's name: ",i);
        scanf(" %[^\n]", name);
        if (!isValidName(name)) {
            printf("Enter a valid name.\n");
            while (getchar() != '\n');  
        }
    } while (!isValidName(name));
    
    // Input and validate age
    do {
        printf("Enter the %dth passenger's age: ",i);
        scanf("%d", &age);
        if (!isValidAge(age)) {
            printf("Enter a valid age between 4 and 123.\n");
            while (getchar() != '\n');  
        }
    } while (!isValidAge(age));

   
    do {
        printf("Enter your phone number : ");
        scanf("%s", phoneNumber);
        if (strcmp(phoneNumber, "-") == 0) {
            strcpy(email, "N/A");
            break;
        }
        if (!isValidPhoneNumber(phoneNumber)) {
            printf("Enter a valid 10-digit phone number that does not start with 0.\n");
            while (getchar() != '\n');  
        }
    } while (!isValidPhoneNumber(phoneNumber));

    do {
        printf("Enter your email (or press - to skip): ");
        scanf("%s", email);
        if (strcmp(email, "-") == 0) {
            strcpy(email, "N/A");
            break;
        }
        if (!isValidEmail(email)) {
            printf("Enter a valid email .\n");
            while (getchar() != '\n');  
        }
    } while (!isValidEmail(email));


    // Input and validate gender
    do {
        printf("Enter your gender (M/F/O): ");
        scanf(" %c", &gender);
        gender = toupper(gender);  
        if (!isValidGender(gender)) {
            printf("Enter a valid gender (M/F/O).\n");
            while (getchar() != '\n'); 
        }
    } while (!isValidGender(gender));

   
    printf("\n--- Passenger Details ---\n");
    printf("Name: %s\n", name);
    printf("Age: %d\n", age);
    printf("Phone Number: %s\n", strcmp(phoneNumber, "-") == 0 ? "N/A" : phoneNumber);
    printf("Email: %s\n", strcmp(email, "-") == 0 ? "N/A" : email);
    printf("Gender: %c\n", gender);
    int reservation=0;
insert_passenger(name,gender,age,phoneNumber,reservation); //gen,age,phone_num,reservation
}


	}
void displayMainMenu() 
{ 
	printf("\n=== Bus Reservation System ===\n"); 
	printf("1. Login\n"); 
	printf("2. Exit\n"); 
	printf("Enter your choice: "); 
} 
void display_user_details()
{
    printf("\n---------------------------------\n");
printf("\nOperations on Ticket & Queue\n");
printf("\n---------------------------------\n");
printf("\n1. Add people in Q");
printf("\n2. Book ticket");
printf("\n3.Display All Persons in Q:");
printf("\n4.Display Bill");
printf("\n5. View Status of the train");
printf("\n6.Delete reservation using id number provided");
printf("\n10.Exit\n");
printf("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");
}
void display_persons()
{
    if(firstSenior==NULL)
    {
        printf("no seniors");
    }
    else
    {
        Node *ptr=NULL;
for (ptr = firstSenior; ptr != NULL;ptr = ptr->next)
{    
  printf("%s\t", ptr->name);
}
    }
if (firstPerson == NULL)
{

printf(":No non-senior Person in the list to display\n");
}
else
{ Node *ptr=NULL;
for (ptr = firstPerson; ptr != NULL;ptr = ptr->next)
{    
  printf("%s\t", ptr->name);
}
}
}
int loginUser(struct User users[], int numUsers, char username[], char password[]) 
{ 
	for (int i = 0; i < numUsers; i++) { 
		if (strcmp(users[i].username, username) == 0 
			&& strcmp(users[i].password, password) == 0) { 
			return i; 
					
		} 
	} 
	return -1; 
} 
void decorate()
  {
	printf("\t\t\t###########################################################################");
    printf("\n\t\t\t############                                                   ############");
    printf("\n\t\t\t############          Train Ticket Booking System in C         ############");
    printf("\n\t\t\t############                                                   ############");
    printf("\n\t\t\t###########################################################################");
    printf("\n\t\t\t---------------------------------------------------------------------------\n");
    printf("\n\t\t\t----------------------------------------------------------------------------");

	printf("\n\n\n\n\n");
    printf("\n\t\t\t  **-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**\n");
    printf("\n\t\t\t        =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=");
    printf("\n\t\t\t        =                  WELCOME                  =");
    printf("\n\t\t\t        =                  TO THE                   =");
    printf("\n\t\t\t        =                   VASS                    =");
    printf("\n\t\t\t        =                  SYSTEM                   =");
    printf("\n\t\t\t        =                                           =");
    printf("\n\t\t\t        =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=");
    printf("\n\t\t\t  **-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**\n");
  } 
/void bookTicket(struct Bus buses[], int numBuses, struct Node passengers[], int numPassengers, int userId) 
{ 
	printf("\nEnter Bus Number: "); 
	int busNumber; 
	scanf("%d", &busNumber); 

	// Find the bus with the given busNumber 
	int busIndex = -1; 
	for (int i = 0; i < numBuses; i++) { 
		if (buses[i].busNumber == busNumber) { 
			busIndex = i; 
			break; 
		} 
	} 

	if (busIndex == -1) { 
		printf("Bus with Bus Number %d not found.\n", 
			busNumber); 
	} 
	else if (buses[busIndex].availableSeats == 0) { 
		printf("Sorry, the bus is fully booked.\n"); 
	} 
	else { 
		

		// Assign a seat number to the passenger 
		passengers[*numPassengers].seatNumber 
			= buses[busIndex].totalSeats 
			- buses[busIndex].availableSeats + 1; 

		// Update the passenger's bus number 
		passengers[*numPassengers].busNumber = busNumber; 

		// Update available seats 
		buses[busIndex].availableSeats--; 

		printf("Ticket booked successfully!\n"); 
		(*numPassengers)++; 
	} 
} */
void Reservation() {
    int NoOfSeats, i;
    printf("How many seats do you want to reserve?\n");
    scanf("%d", &NoOfSeats);

    for (i = 0; i < NoOfSeats; i++) {
        seat_booking();
    }
}
void seatDisplay() {
    int i, j;
    printf("\t \t Seats\n");
    int s=1;
    for (i = 0; i < 10; i++) {
        printf("Row %d: ", i + 1);
        for (j = 0; j < 10; j++) {
            if (Seats[i][j] == 0)
                printf("  %d  ",s);
                
            else
                printf(" X"); // X for reserved seats
            s++;    
        }
        printf("\n");
    }
    printf("\n");
}
int seat_booking() {
    int row, col;
    printf("Which row do you want to choose? (1-10)");
    scanf("%d", &row);
    printf("Which seat do you want to select? (1-10): ");
    scanf("%d", &col);

    if (row < 1 || row > 10 || col < 1 || col > 10) {
        printf("Invalid selection. Please choose a valid row (1-10) and seat (1-10).\n");
        seat_booking(); // Call the function recursively for a valid selection.
        return 0;
    }

    if (Seats[row - 1][col - 1] != 0) {
        printf("Seat is already reserved. Please choose another seat.\n");
        seat_booking(); // Call the function recursively for an available seat.
        return 0;
    }

    Seats[row - 1][col - 1] = 1;
    printf("Congratulations!! Reservation Completed!!!\n");
    seatDisplay();
    return 0;
}

void main()
{

decorate();

int numPassengers=0;
struct User users[5] = { 
		{ "Shreya", "Shreya" }, { "Sahana", "Sahana" }, 
		{ "Vedantika", "Vedantika" }, { "Atharv", "Atharv" }, 
		{ "X Æ A", "X Æ A" }, 
	}; 


    struct Bus buses[3] = { 
		{ 101, "City A", "City B", 50, 50, 25.0 }, 
		{ 102, "City C", "City D", 40, 40, 20.0 }, 
		{ 103, "City E", "City F", 30, 30, 15.0 }, 
	}; 

	int numUsers = 5;

	int i, j, a1, a2, b, c, x = 0, d, e, r;
	char o;

	int ch;
char ans = 'Y';
int loggedInUserId = -1; // Index of the logged-in user 
int numBuses = 3;
//struct Node passengers[500];
	while (1) { 
if (loggedInUserId == -1) { 
			displayMainMenu(); 
			int choice; 
			scanf("%d", &choice); 

    if (choice==1)
    { 
				char username[50]; 
				char password[50]; 

				printf("Enter Username: "); 
				scanf("%s", username); 
				printf("Enter Password: "); 
				scanf("%s", password); 

				loggedInUserId = loginUser( 
					users, numUsers, username, password); 
				if (loggedInUserId == -1) { 
					printf("Login failed. Please check "
						"your username and password.\n"); 
				} 
				else { 
					printf( 
						"Login successful. Welcome, %s!\n", 
						username); 
				} 
			} 
    else if (choice == 2) { 
				printf("Exiting the program.\n"); 
				break; 
			} 
	else { 
				printf( "Invalid choice. Please try again.\n"); 
			} 
		} 
		
else 
{

while (ans == 'Y'||ans == 'y')
{
display_user_details();
printf("hi");
printf("\nEnter your choice : ");
scanf("%d", &ch);
	

	switch (ch)
{
case 1: 
    printf("Enter Number Of Passengers: ");
	fflush(stdin);
	scanf("%d", &j);
    //ATHARVS CODE OF ACCEPTING DETAILS
	details(j);
    break;
    

case 2: 
//bookTicket(buses, numBuses, passengers, &numPassengers, loggedInUserId); 
    Reservation();
    seatDisplay();
    break;
case 3: 
    printf("\n...Displaying Persons in Q From Beginning to End : \n");
    display_persons();
    break;
case 4: 
    printf("Display the bill when bill gets done lol");
	break;
case 5:
    printf("vedantikas part");
    break;
case 6:
    printf("remove the certain person from the linked list. and show that the seat is empty");
	break;

case 10: 
    printf("\n...Exiting...\n");
    
    break;
default: 
    printf("\n...Invalid Choice...\n");
    break;
}
printf("\n\n You want to continue (Y/N)");
scanf(" %c", &ans);
}	
}
}
}
